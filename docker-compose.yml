services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: checkbook-postgres
    environment:
      POSTGRES_DB: checkbook
      POSTGRES_USER: checkbook_user
      POSTGRES_PASSWORD: checkbook_password
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - checkbook-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U checkbook_user -d checkbook"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for rate limiting and caching
  redis:
    image: redis:7-alpine
    container_name: checkbook-redis
    ports:
      - "6379:6379"
    networks:
      - checkbook-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: checkbook-mailhog
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web UI
    networks:
      - checkbook-network

  # Spring Boot API
  api:
    build:
      context: ./checkbook-api
      dockerfile: Dockerfile
    container_name: checkbook-api
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/checkbook
      SPRING_DATASOURCE_USERNAME: checkbook_user
      SPRING_DATASOURCE_PASSWORD: checkbook_password
      SPRING_MAIL_HOST: mailhog
      SPRING_MAIL_PORT: 1025
      SPRING_MAIL_USERNAME: ""
      SPRING_MAIL_PASSWORD: ""
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: false
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: false
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      JWT_SECRET: your-super-secret-jwt-key-for-development-only-change-in-production
      JWT_EXPIRATION: 86400000
      APP_BASE_URL: http://localhost:3000
    ports:
      - "8080:8080"
    networks:
      - checkbook-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mailhog:
        condition: service_started
    volumes:
      - ./checkbook-api/logs:/app/logs

  # React UI
  ui:
    build:
      context: ./checkbook-ui
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: http://localhost:8080/api
    container_name: checkbook-ui
    ports:
      - "3000:80"
    networks:
      - checkbook-network
    depends_on:
      - api

  # NGINX Reverse Proxy (optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: checkbook-nginx
    ports:
      - "443:443"
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - checkbook-network
    depends_on:
      - api
      - ui
    profiles:
      - production

networks:
  checkbook-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local